plugins {
    id 'java-library'
    id 'maven-publish'
    id 'dev.lukebemish.documenteddfu.utils'
    id 'dev.lukebemish.docpatcher' version '0.1.1'
}

group = 'dev.lukebemish'

def dfuVersion = '6.0.8'

version = dfuVersion + '-' + documentedDfu.gitTimestamp.get()

java {
    toolchain.languageVersion = JavaLanguageVersion.of(17)
    withSourcesJar()
}

repositories {
    mavenCentral()
    maven {
        name = 'Mojang'
        url = 'https://libraries.minecraft.net'
    }
}

configurations {
    originalSources
    original
    originalTransitive
    originalTransitiveRuntime
    compileOnly.extendsFrom originalTransitiveRuntime

    apiPublishing
    apiElements.extendsFrom apiPublishing
    runtimePublishing
    runtimeElements.extendsFrom runtimePublishing
}

configurations.apiPublishing.defaultDependencies { dependencySet ->
    configurations.originalTransitive.resolvedConfiguration.firstLevelModuleDependencies.each {
        it.children.each { child ->
            dependencySet.add(project.dependencies.create(child.module.toString()))
        }
    }
}

configurations.runtimePublishing.defaultDependencies { dependencySet ->
    configurations.originalTransitiveRuntime.resolvedConfiguration.firstLevelModuleDependencies.each {
        it.children.each { child ->
            dependencySet.add(project.dependencies.create(child.module.toString()))
        }
    }
}

dependencies {
    originalSources("com.mojang:datafixerupper:$dfuVersion:sources") {
        transitive = false
    }
    original("com.mojang:datafixerupper:$dfuVersion") {
        transitive = false
    }
    originalTransitiveRuntime("com.mojang:datafixerupper:$dfuVersion") {
        attributes {
            attribute Usage.USAGE_ATTRIBUTE, project.objects.named(Usage, Usage.JAVA_RUNTIME)
        }
    }
    originalTransitive("com.mojang:datafixerupper:$dfuVersion") {
        attributes {
            attribute Usage.USAGE_ATTRIBUTE, project.objects.named(Usage, Usage.JAVA_API)
        }
    }
}

docPatcher.diff {
    clean = 'clean'
    modified = 'modified'
    patches = 'patches'
    output = 'output'
    outputSourceSet.set sourceSets.main
    outputDirectory.set file("build/patched")
    source = configurations.originalSources
    missedDirectory.set file("build/missed")
}

tasks.register('setup') {
    group = 'setup'
    dependsOn 'docPatcherSetupModifiedApplyPatches'
}

tasks.register('generatePatches') {
    group = 'setup'
    dependsOn tasks.docPatcherApplyPatchesGeneratePatches
}

tasks.register('extractManifest', Copy) {
    dependsOn configurations.original
    from zipTree(configurations.original.singleFile)
    into 'build/manifest'
    include 'META-INF/MANIFEST.MF'
}

tasks.named('compileJava') {
    dependsOn tasks.docPatcherApplyOutputApplyPatches
}

tasks.named('jar', Jar) {
    dependsOn configurations.original
    dependsOn tasks.extractManifest
    from(zipTree(configurations.original.singleFile))
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    manifest {
        from 'build/manifest/META-INF/MANIFEST.MF'
        attributes 'Documented-DFU-Version': project.version
        attributes 'Documented-DFU-Commit': documentedDfu.gitHash.get()
    }
}

tasks.named('sourcesJar', Jar) {
    dependsOn tasks.docPatcherApplyOutputApplyPatches
    def licenseFile = project.file('LICENSE')
    inputs.file licenseFile
    filesMatching('LICENSE') {
        expand 'license': licenseFile.text
    }
}

processResources {
    def licenseFile = project.file('LICENSE')
    inputs.file licenseFile
    filesMatching('LICENSE') {
        expand 'license': licenseFile.text
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            name = 'Maven'
            url = System.getenv('MAVEN_URL')
            credentials {
                username = System.getenv('MAVEN_USER')
                password = System.getenv('MAVEN_PASSWORD')
            }
        }
    }
}
