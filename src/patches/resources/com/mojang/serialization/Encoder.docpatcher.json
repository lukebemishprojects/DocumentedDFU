{
  "clazz": {
    "doc": "Encodes objects to a serialized form.",
    "typeParameters": [
      "the type of object to encode"
    ]
  },
  "methods": {
    "comap(Ljava/util/function/Function;)Lcom/mojang/serialization/Encoder;": {
      "doc": "Transforms the type of this encoder using the given function.",
      "tags": {
        "return": [
          "a new encoder"
        ]
      },
      "parameters": [
        "a function to apply to the input before encoding"
      ],
      "typeParameters": [
        "the type of object for the new encoder to encode"
      ]
    },
    "empty()Lcom/mojang/serialization/MapEncoder;": {
      "doc": "Produces a {@link MapEncoder} which encodes no fields, parameterized by a type.",
      "tags": {
        "see": [
          "Codec#EMPTY"
        ],
        "return": [
          "a new {@link MapEncoder}"
        ]
      },
      "typeParameters": [
        "the type of object for the new encoder to encode"
      ]
    },
    "encode(LA;Lcom/mojang/serialization/DynamicOps;LT;)Lcom/mojang/serialization/DataResult;": {
      "doc": "Encodes an object to a serialized form, adding to an existing prefix.",
      "tags": {
        "return": [
          "a {@link DataResult} containing the serialized form of the object, or an error if the object could not be serialized"
        ]
      },
      "parameters": [
        "the object to encode",
        "a {@link DynamicOps} for the target serialized format",
        "existing data that the encoded object should be added to"
      ],
      "typeParameters": [
        "the type to serialize to"
      ]
    },
    "encodeStart(Lcom/mojang/serialization/DynamicOps;LA;)Lcom/mojang/serialization/DataResult;": {
      "doc": "Encode an object to a serialized form.",
      "tags": {
        "return": [
          "a {@link DataResult} containing the serialized form of the object, or an error if the object could not be serialized"
        ]
      },
      "parameters": [
        "a {@link DynamicOps} for the target serialized format",
        "the object to encode"
      ],
      "typeParameters": [
        "the type to serialize to"
      ]
    },
    "error(Ljava/lang/String;)Lcom/mojang/serialization/Encoder;": {
      "doc": "Produces an encoder which always errors with the given message.",
      "tags": {
        "see": [
          "Codec#error(String)"
        ],
        "return": [
          "a new encoder"
        ]
      },
      "parameters": [
        "the error message"
      ],
      "typeParameters": [
        "the type of object for the new encoder to encode"
      ]
    },
    "fieldOf(Ljava/lang/String;)Lcom/mojang/serialization/MapEncoder;": {
      "doc": "{@return a {@link MapEncoder} that encodes a single field with the given name using this encoder}"
    },
    "flatComap(Ljava/util/function/Function;)Lcom/mojang/serialization/Encoder;": {
      "doc": "Useful when the type to encode cannot always be converted to the type expected by this encoder.",
      "tags": {
        "return": [
          "a new encoder"
        ]
      },
      "parameters": [
        "a function to apply to the input before encoding"
      ],
      "typeParameters": [
        "the type of object for the new encoder to encode"
      ]
    },
    "withLifecycle(Lcom/mojang/serialization/Lifecycle;)Lcom/mojang/serialization/Encoder;": {
      "doc": "Produces a new encoder with the given {@link Lifecycle}.",
      "tags": {
        "return": [
          "a new encoder"
        ]
      },
      "parameters": [
        "the lifecycle to apply to the new encoder"
      ]
    }
  }
}