{
  "clazz": {
    "doc": [
      "Delegate codecs allow using the value of an initially decoded key to determine how to decode the rest of the input.",
      "On encoding, the behaviour is similar, with the dispatch codec finding a codec from the supplied type, using that to",
      "encode the value and using the receiver to encode the key.",
      "<p>",
      "<strong>Note:</strong> codecs constructed from a {@link MapCodec.MapCodecCodec} have special behaviour compared to",
      "other codecs; while other codecs, act on a {@code \"value} field within the structure that the dispatch codec is",
      "decoding, a {@link MapCodec.MapCodecCodec} that has been delegated to (such as the output of {@link MapCodec#codec()}",
      "or {@link RecordCodecBuilder#create(Function)} will instead decode and encode to the root level of the data. This",
      "means that if you want this behaviour, you should make sure that your codec is a {@link MapCodec.MapCodecCodec} - which",
      "means using the {@link MapCodec} specific {@code xmap}/{@code flatXmap} methods instead of the ones on {@link Codec}",
      "in any transformations you might do! This behaviour can be disabled by setting the {@code assumeMap} argument of the",
      "constructor to {@code true}, in which case every delegated codec will attempt to decode the full input object. Also of",
      "note is that this behaviour is lost when using a {@link DynamicOps} with {@link DynamicOps#compressMaps()}, in which",
      "case the delegated codec is always encoded in a value field.",
      "<p>",
      "<strong>Note:</strong> On encoding the function fed into the {@code type} argument of both constructors is used to find",
      "a key from an object, and that key is then used to find the encoder using the function fed into the constructor;",
      "however, there is no guarantee that the capture of {@code ? super E} fed into the first function is the same capture",
      "that comes out of the second! In other words, this method is not inherently typesafe. Take care that whatever",
      "functions you provide only involve a single capture of that generic for a given key; a common approach is using the",
      "delegated codec itself as the key."
    ],
    "typeParameters": [
      "the type of the key",
      "the type of the value"
    ]
  }
}